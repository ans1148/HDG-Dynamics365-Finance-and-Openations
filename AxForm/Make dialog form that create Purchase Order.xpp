// If we want to make form that create purchase order, it seems difficult.
// Because when we want to make insert into PurchLine, it is difficult to represent in PurchLine.ModifiedField Method.
// Let's look at PurchTable Form that can make purchase order as standard logic.
// As you can see there are many modified method in PurchLine datasource not in PurchLine Table.
// So, we need to reference PurchLine Method in PurchTable Form.
// This example is constructed by inserting only the mandatory fields.

/********************************************************************
note : We must joined table between PurchTable and PurchLine as Delayed
*********************************************************************/

[Form]
public class PurchaseIntegrationEntry_Purchase extends FormRun
{
    PurchTable      parmPurchTable;

    /// <summary>
    /// Initialize PurchTable
    /// </summary>
    public void init()
    {
        PurchTableType  purchTableType;
        NumberSeq       numberSeq;
        
        super();
        
        PurchTable_ds.create();
        
        PurchTable.PurchaseType = PurchParameters::find().PurchaseType;
        purchTableType = PurchTable.type();
        purchTableType.formMethodDataSourceCreate(element, PurchTable_ds);
        purchTableType.initValue();
        
        PurchTable_ds.refresh();
    }
    
    [DataSource]
    class PurchLine
    {
        /// <summary>
        /// Initialize PurchLine
        /// </summary>
        /// <param name = "_append">append</param>
        public void create(boolean _append = false)
        {
            super(_append);

            PurchLine.initFromPurchTable(PurchTable_ds.getFirst());
        }

        /// <summary>
        /// Insert remain value
        /// </summary>
        public void write()
        {
            // If there have not below code, Purchase order will have 'Canceled' status.
            /****************************************************
            // Instead of below code then used to purchLineType.defaultFromField method
            PurchLine.QtyOrdered = PurchLine.calcQtyOrdered();

            PurchLine.RemainPurchPhysical           = PurchLine.PurchQty;
            PurchLine.RemainPurchFinancial          = 0;
            PurchLine.RemainInventPhysical          = PurchLine.QtyOrdered;
            PurchLine.RemainInventFinancial         = 0;
            PurchLine.PdsCWRemainInventPhysical     = PurchLine.PdsCWQty;
            PurchLine.PdsCWRemainInventFinancial    = 0;
            *******************************************************/
            super();
        }
        
        [DataField]
        class ItemId 
        {
            /// <summary>
            /// If item is modified, set standard data
            /// </summary>
            public void modified()
            {
                super();
                
                purchLine_ds.cacheCalculateMethod(tableMethodStr(PurchLine, itemName));
                PurchLineType purchLineType = PurchLine.type();
                purchLineType.defaultFromField(fieldNum(PurchLine,ItemId), true);
            }

        }

        [DataField]
        class PriceUnit 
        {
            /// <summary>
            /// If Unit is modified, set standard data 
            /// </summary>
            public void modified()
            {
                super();

                PurchLineType purchLineType = PurchLine.type();
                purchLineType.defaultFromField(fieldNum(PurchLine,PurchUnit), true);
            }

        }

        [DataField]
        class PurchQty 
        {
            /// <summary>
            /// If Qty is modified, set standard data
            /// </summary>
            public void modified()
            {
                super();

                PurchLineType purchLineType = PurchLine.type();
                purchLineType.defaultFromField(fieldNum(PurchLine,PurchQty), true);
            }

        }

        // This is Confirmation and Product receipt Method
        /// <summary>
        /// When Closed Ok, check Prodcut receipt button and process
        /// </summary>
        /// <returns>Close status</returns>
        public boolean canClose()
        {
            boolean ret;
            
            PurchFormLetter purchFormLetterConfirm, purchFormLetterPackingSlip;

            ret = super();

            if(element.closedOk() && ProductReceiptCheck.value())
            {
                if(Box::yesNo("Do you want Product Receipt?", DialogButton::Yes, "Product Receipt"))
                {
                    if(!ProductReceiptNumber.valueStr())
                    {
                        throw error("@DHB:DHB0036");
                    }
                    try
                    {
                        ttsbegin;

                        purchFormLetterConfirm = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);
                        purchFormLetterConfirm.update(PurchTable, purchFormLetterConfirm.parmParmTableNum());
                        purchFormLetterPackingSlip = PurchFormLetter::construct(DocumentStatus::PackingSlip);
                        purchFormLetterPackingSlip.update(PurchTable, ProductReceiptNumber.valueStr());

                        ttscommit;
                    }
                    catch(Exception::Error)
                    {
                        ret = false;
                    }
                }
                else
                {
                    ret = false;
                }
            }
        
            return ret;
        }
}
